{"version":3,"sources":["routers/BlueprintsRouter.js"],"names":["console","log","BlueprintsRouter","path","router","init","req","res","status","json","id","parseInt","params","blueprint","find","item","received","parseProduce","body","newProduce","get","getAll","getById"],"mappings":";;;;;;qjBAAA;;AAEA;;;;AAEA;;;;;;AADAA,QAAQC,GAAR;;IAQqBC,gB;;AAKnB;;AAJA;AAKA,8BAAiD;AAAA,QAArCC,IAAqC,uEAAtB,oBAAsB;;AAAA;;AAC/C;AACA,SAAKC,MAAL,GAAc,sBAAd;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA;AACA,SAAKE,IAAL;AACD;;AAED;;;;;;;2BAGOC,G,EAAeC,G,EAAsB;AAC1CA,UAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD;;;4BAEOH,G,EAAeC,G,EAAqB;AAC1C,UAAMG,KAAKC,SAASL,IAAIM,MAAJ,CAAWF,EAApB,EAAwB,EAAxB,CAAX;AACA,UAAMG,YAAY,qBAAWC,IAAX,CAAgB,UAACC,IAAD;AAAA,eAAeA,KAAKL,EAAL,KAAYA,EAA3B;AAAA,OAAhB,CAAlB;AACA,UAAIG,SAAJ,EAAe;AACbN,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,qBAAWA;AADQ,SAArB;AAGD,OAJD,MAIO;AACLN,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB;AACD;AACF;;;iCAEYH,G,EAAeC,G,EAAsB;AAChD,UAAMS,WAA8BC,aAAaX,IAAIY,IAAjB,CAApC;AACA,UAAMC,aAAaH,WAAWV,IAAIY,IAAf,GAAsB,IAAzC;AACD;AACD;;;;;;2BAGa;AACX,WAAKd,MAAL,CAAYgB,GAAZ,CAAgB,GAAhB,EAAqB,KAAKC,MAA1B;AACA,WAAKjB,MAAL,CAAYgB,GAAZ,CAAgB,MAAhB,EAAwB,KAAKE,OAA7B;AACD;;;;;;kBA3CkBpB,gB","file":"BlueprintsRouter.js","sourcesContent":["// @ flow\n\nimport blueprints from \"../data/blueprints\";\nconsole.log(blueprints);\nimport { Router } from \"express\";\n\nexport type Blueprint = {\n  name: string,\n  content: string\n};\n\nexport default class BlueprintsRouter {\n  // these fields must be type annotated, or Flow will complain!\n  router: Router;\n  path: string;\n\n  // take the mount path as the constructor argument\n  constructor(path: string = \"/api/v1/blueprints\") {\n    // instantiate the express.Router\n    this.router = Router();\n    this.path = path;\n    // glue it all together\n    this.init();\n  }\n\n  /**\n   * Return all items in the inventory\n   */\n  getAll(req: $Request, res: $Response): void {\n    res.status(200).json(blueprints);\n  }\n\n  getById(req: $Request, res: $Response): any {\n    const id = parseInt(req.params.id, 10);\n    const blueprint = blueprints.find((item: any) => item.id === id);\n    if (blueprint) {\n      res.status(200).json({\n        blueprint: blueprint\n      });\n    } else {\n      res.status(404).json({});\n    }\n  }\n\n  addBlueprint(req: $Request, res: $Response): void {\n    const received: Produce | boolean = parseProduce(req.body);\n    const newProduce = received ? req.body : null;\n  }\n  /**\n   * Attach route handlers to their endpoints.\n   */\n  init(): void {\n    this.router.get(\"/\", this.getAll);\n    this.router.get(\"/:id\", this.getById);\n  }\n}\n"]}