{"version":3,"sources":["__tests__/Api-rntest.js"],"names":["app","express","describe","expectedProps","it","get","expect","then","res","body","toBeInstanceOf","Array","sampleKeys","Object","keys","forEach","key","includes","toBe","extraProps","filter","length","reqKeys","item","toContain","id","name","Promise","all","blueprint","content","post","send","peach","status","newBlueprints","find"],"mappings":"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","file":"Api-rntest.js","sourcesContent":["import request from 'supertest-as-promised';\nimport API from '../api';\n\nconst app = new API().express;\n\ndescribe('Blueprint API', () => {\n  describe('GET /api/v1/blueprints - get all blueprints', () => {\n    // properties expected on an obj in the response\n    let expectedProps = [\n      'name',\n      'id',\n      'createdAt',\n      'lastUpdated',\n      \"permission\",\n      'owner',\n      'content'\n    ];\n    it('should return JSON array', () => {\n      return request(app).get('/api/v1/blueprints')\n      .expect(200)\n      .then(res => {\n        // check that it sends back an array\n        expect(res.body).toBeInstanceOf(Array);\n      });\n    });\n    it('should return objs w/ correct props', () => {\n      return request(app).get('/api/v1/blueprints')\n      .expect(200)\n      .then(res => {\n        // check for the expected properties\n        let sampleKeys = Object.keys(res.body[0]);\n        expectedProps.forEach((key) => {\n          expect(sampleKeys.includes(key)).toBe(true);\n        });\n      });\n    });\n    it('shouldn\\'t return objs w/ extra props', () => {\n      return request(app).get('/api/v1/blueprints')\n      .expect(200)\n      .then(res => {\n        // check for only expected properties\n        let extraProps = Object.keys(res.body[0]).filter((key) => {\n          return !expectedProps.includes(key);\n        });\n        expect(extraProps.length).toBe(0);\n      });\n    });\n  });\n});\n\ndescribe('GET /api/v1/blueprints/:id - get blueprint by id', () => {\n  it('should return an obj of type Produce', () => {\n    return request(app).get('/api/v1/blueprints/1')\n    .expect(200)\n    .then((res) => {\n      let reqKeys = [\n        'name',\n        'id',\n        'createdAt',\n        'lastUpdated',\n        \"permission\",\n        'owner',\n        'content'\n      ];\n      const {item} = res.body;\n      // check it has correct keys\n      reqKeys.forEach((key) => {\n        expect(Object.keys(item)).toContain(key);\n      });\n      // check type of each field\n      expect(typeof item.id).toBe('number');\n      expect(typeof item.name).toBe('string');\n    });\n  });\n  it('should 404 on a request for a nonexistant id', () => {\n    return Promise.all([\n      request(app).get('/api/v1/blueprints/-32')\n      .expect(404),\n      request(app).get('/api/v1/blueprints/99999')\n      .expect(404)\n    ]);\n  });\n});\n\ndescribe('POST /api/v1/blueprints - create new item', () => {\n  let blueprint = {\n    name: 'Test Blueprint',\n    content: \"{\\\"key\\\":1,\\\"key2\\\":\\\"val\\\"}\",\n  };\n  it('should accept and add a valid new item', () => {\n    return request(app).post('/api/v1/blueprints')\n    .send(peach)\n    .then((blueprint) => {\n      expect(res.body.status).toBe(200);\n      return request(app).get('/api/v1/blueprints');\n    })\n    .then((res) => {\n      let newBlueprints = res.body.find(blueprint => blueprint.name === 'Test Blueprint');\n      expect(res.status).toBe(200);\n    });\n  });\n});\n"]}